[{"E:\\ReactVideoRecordingAndScreenSharing\\src\\index.js":"1","E:\\ReactVideoRecordingAndScreenSharing\\src\\reportWebVitals.js":"2","E:\\ReactVideoRecordingAndScreenSharing\\src\\App.js":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":14276,"mtime":1611123947854,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1khiqpa",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"E:\\ReactVideoRecordingAndScreenSharing\\src\\index.js",[],["16","17"],"E:\\ReactVideoRecordingAndScreenSharing\\src\\reportWebVitals.js",[],"E:\\ReactVideoRecordingAndScreenSharing\\src\\App.js",["18","19","20","21","22","23","24","25","26","27","28","29","30"],"/* eslint-disable jsx-a11y/alt-text */\r\nimport logo from './logo.svg';\r\nimport screen from './screen.svg';\r\nimport video from './video.svg';\r\nimport record from './record.svg';\r\nimport defaultImg from './default.svg';\r\nimport live from './live.svg';\r\nimport mic from './microphone.svg';\r\nimport mutedmic from './microphonemuted.svg';\r\n\r\n\r\n\r\n\r\nimport './App.css';\r\nimport { useEffect, useState } from 'react';\r\nimport 'react-notifications-component/dist/theme.css'\r\nimport { store } from 'react-notifications-component';\r\nimport ReactNotification from 'react-notifications-component'\r\nimport { useStopwatch } from 'react-timer-hook';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst videoElem = document.getElementById(\"video\");\r\nlet dataFrameHeight, dataFrameWidth\r\n// const errorElement = document.querySelector('#errorMsg');\r\nvar canvasRecorder\r\n\r\n/* globals MediaRecorder */\r\n\r\nlet mediaRecorder;\r\nlet recordedBlobs = [];\r\n\r\nfunction App() {\r\n  const time = new Date();\r\n  time.setSeconds(time.getSeconds() + 36000);\r\n\r\n  const [screenshare, setScreenshare] = useState(false)\r\n  const [recording, setRecording] = useState(false)\r\n  const [storing, setStoring] = useState(false)\r\n  const [audioRecording, setAudioRecording] = useState(false)\r\n  const [muted, setMuted] = useState(false)\r\n  const [expanded, setExpanded] = useState(\"recorded\")\r\n  const [drawVideoIntervalId, setDrawVideoIntervalId] = useState('')\r\n  const [screenShareVideoIntervalId, setDrawScreenShareIntervalId] = useState('')\r\n  const {\r\n    minutes,\r\n    hours,\r\n    seconds,\r\n    isRunning,\r\n    start,\r\n    reset,\r\n    restart,\r\n  } = useStopwatch({ expiryTimestamp: time });\r\n\r\n  window.screenshare = screenshare\r\n  window.recording = recording\r\n  window.expanded = expanded\r\n\r\n\r\n  async function startScreenRecording() {\r\n    try {\r\n      if (!recording) {\r\n        setExpanded('screen')\r\n      }\r\n      navigator.mediaDevices.getDisplayMedia({ video: true, audio: true })\r\n        .then(handleSuccess, handleError);\r\n    } catch (err) {\r\n      console.error(\"Error: \" + err);\r\n    };\r\n\r\n  }\r\n\r\n  function handleSuccess(stream) {\r\n    setScreenshare(true)\r\n    const video = document.querySelector('video#screen');\r\n    window.stream = stream\r\n    video.srcObject = stream;\r\n    if (recording) {\r\n      clearInterval(drawVideoIntervalId);\r\n      setDrawVideoIntervalId(\"\")\r\n      clearCanvas()\r\n    }\r\n    if (screenShareVideoIntervalId) {\r\n      clearInterval(screenShareVideoIntervalId)\r\n      setDrawScreenShareIntervalId(\"\")\r\n      clearCanvas()\r\n    }\r\n\r\n    let setIntervalDrawScreenShareId = window.setInterval(() => drawOnCanvas({\r\n      recording,\r\n      screenshare: true,\r\n      type: \"screenshare\",\r\n      aspectRatio: stream.getVideoTracks()[0].getSettings().aspectRatio,\r\n      height: stream.getVideoTracks()[0].getSettings().height,\r\n      width: stream.getVideoTracks()[0].getSettings().width\r\n    }), 1000 / 60)\r\n    setDrawScreenShareIntervalId(setIntervalDrawScreenShareId)\r\n    stream.getVideoTracks()[0].addEventListener('ended', () => {\r\n      setScreenshare(false)\r\n    });\r\n  }\r\n\r\n\r\n  function stopScreenShare() {\r\n    const video = document.querySelector('video#screen');\r\n    if (!recording) {\r\n      clearInterval(screenShareVideoIntervalId)\r\n    }\r\n    video.srcObject.getTracks().forEach(track => track.stop())\r\n    setScreenshare(false)\r\n    clearCanvas()\r\n  }\r\n\r\n  function handleError(error) {\r\n    store.addNotification({\r\n      title: error.message,\r\n      message: \" \",\r\n      type: \"danger\",\r\n      insert: \"top\",\r\n      container: \"top-right\",\r\n      animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n      animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n      dismiss: {\r\n        duration: 5000,\r\n        onScreen: true\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  async function startVideoRecording(params) {\r\n    if (!screenshare) {\r\n      setExpanded('recorded')\r\n    }\r\n    const constraints = {\r\n      audio: {\r\n        echoCancellation: { exact: true }\r\n      },\r\n      video: {\r\n        width: 1280, height: 720\r\n      }\r\n    };\r\n    console.log('Using media constraints:', constraints);\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n      handleSuccessVideoRecording(stream);\r\n    } catch (e) {\r\n      setRecording(false)\r\n      console.error('navigator.getUserMedia error:', e);\r\n      handleError(new Error(`navigator.getUserMedia error:${e.toString()}`));\r\n    }\r\n  }\r\n\r\n  function handleSuccessVideoRecording(stream) {\r\n    setRecording(true)\r\n    console.log('getUserMedia() got stream:', stream);\r\n    const gumVideo = document.querySelector('video#recorded');\r\n    gumVideo.srcObject = stream;\r\n    window.videoHeight = stream.getVideoTracks()[0].getSettings().height;\r\n    window.videoWidth = stream.getVideoTracks()[0].getSettings().width;\r\n    if (!screenshare) {\r\n      let setIntervalDrawVideoId = window.setInterval(() => drawOnCanvas({\r\n        recording: true,\r\n        screenshare,\r\n      }), 1000 / 60)\r\n      setDrawVideoIntervalId(setIntervalDrawVideoId)\r\n    } else {\r\n      drawOnCanvas({\r\n        recording: true,\r\n        screenshare,\r\n      })\r\n    }\r\n  }\r\n\r\n  function drawOnCanvas({ aspectRatio, width, height, recording, screenshare }) {\r\n    const canvas = window.canvas = document.querySelector('canvas');\r\n    canvas.width = window.innerWidth;\r\n    canvas.height = window.innerHeight;\r\n    const recordedVideo = document.querySelector('video#recorded');\r\n    const video = document.querySelector('video#screen');\r\n    if (window.recording && window.screenshare) {\r\n      if (window.expanded == 'screen') {\r\n        canvas.getContext('2d').drawImage(video, 0, 0, width, height);\r\n        canvas.getContext('2d').drawImage(recordedVideo, window.innerWidth - 205, window.innerHeight - 125 - 150, (1280 * 105) / 720, 105);\r\n      } else {\r\n        window.width = (width * 105) / (height);\r\n        canvas.getContext('2d').drawImage(recordedVideo, 0, 0, window.innerWidth, window.videoHeight);\r\n        canvas.getContext('2d').drawImage(video, window.innerWidth - 205, window.innerHeight - 125 - 150, (width * 105) / (height), 105);\r\n      }\r\n    }\r\n    else {\r\n      if (window.recording) {\r\n        canvas.getContext('2d').drawImage(recordedVideo, 0, 0, window.innerWidth, (window.videoHeight * window.innerWidth)/1280);\r\n      }\r\n      if (window.screenshare) {\r\n        canvas.getContext('2d').drawImage(video, 0, 0, width, height);\r\n      }\r\n    }\r\n  }\r\n\r\n  function clearCanvas() {\r\n    const context = window.canvas.getContext('2d');\r\n    context.clearRect(0, 0, window.canvas.width, window.canvas.height);\r\n  }\r\n\r\n  function stopVideoRecording() {\r\n    const video = document.querySelector('video#recorded');\r\n    if (drawVideoIntervalId) {\r\n      clearInterval(drawVideoIntervalId)\r\n    }\r\n    video.srcObject.getTracks().forEach(track => track.stop())\r\n    setRecording(false)\r\n    clearCanvas()\r\n  }\r\n\r\n\r\n  function handleDataAvailable(event) {\r\n    console.log('handleDataAvailable', event);\r\n    if (event.data && event.data.size > 0) {\r\n      recordedBlobs.push(event.data);\r\n    }\r\n  }\r\n\r\n  function recordAudio() {\r\n    // if (recorder && recorder.state == \"recording\") {\r\n    //     recorder.stop();\r\n    //     audioStream.getAudioTracks()[0].stop();\r\n    // } else {\r\n        navigator.mediaDevices.getUserMedia({\r\n            audio: true\r\n        }).then(function(stream) {\r\n            window.audioStream = stream;\r\n        });\r\n    // }\r\n  }\r\n\r\n  function muteAudio(){\r\n    if(audioRecording){\r\n      window.audioStream.getAudioTracks()[0].enabled = !muted;\r\n      setMuted(!muted)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    recordAudio()\r\n    setAudioRecording(true)\r\n  }, [])\r\n\r\n\r\n\r\n  function startRecording() {\r\n    recordedBlobs = []\r\n    let options = { mimeType: 'video/webm;codecs=vp9,opus' };\r\n    if (!MediaRecorder.isTypeSupported(options.mimeType)) {\r\n      console.error(`${options.mimeType} is not supported`);\r\n      options = { mimeType: 'video/webm;codecs=vp8,opus' };\r\n      if (!MediaRecorder.isTypeSupported(options.mimeType)) {\r\n        console.error(`${options.mimeType} is not supported`);\r\n        options = { mimeType: 'video/webm' };\r\n        if (!MediaRecorder.isTypeSupported(options.mimeType)) {\r\n          console.error(`${options.mimeType} is not supported`);\r\n          options = { mimeType: '' };\r\n        }\r\n      }\r\n    }\r\n\r\n    try {\r\n      let stream = window.canvas.captureStream();\r\n      let mixedStream  = new MediaStream([window.audioStream.getAudioTracks()[0], stream.getVideoTracks()[0]]);\r\n      mediaRecorder = new MediaRecorder(mixedStream, options);\r\n    } catch (e) {\r\n      console.error('Exception while creating MediaRecorder:', e);\r\n      handleError(new Error(`Exception while creating MediaRecorder: ${JSON.stringify(e)}`))\r\n      return;\r\n    }\r\n\r\n    console.log('Created MediaRecorder', mediaRecorder, 'with options', options);\r\n    mediaRecorder.onstop = (event) => {\r\n      console.log('Recorder stopped: ', event);\r\n      console.log('Recorded Blobs: ', recordedBlobs);\r\n      const blob = new Blob(recordedBlobs, { type: 'video/webm' });\r\n      const url = window.URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.style.display = 'none';\r\n      a.href = url;\r\n      a.download = 'test.webm';\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      setTimeout(() => {\r\n        document.body.removeChild(a);\r\n        window.URL.revokeObjectURL(url);\r\n      }, 100);\r\n      setStoring(false)\r\n      reset()\r\n    };\r\n    mediaRecorder.ondataavailable = handleDataAvailable;\r\n    mediaRecorder.start();\r\n    setStoring(true)\r\n    console.log('MediaRecorder started', mediaRecorder);\r\n    start()\r\n  }\r\n\r\n  function stopRecording() {\r\n    mediaRecorder.stop();\r\n  }\r\n\r\n  const OPTIONS = { delay: 100 }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ReactNotification />\r\n      <header className=\"App-header\" id=\"content\">\r\n        {(!recording && !screenshare) ? <div style={{ marginTop: -115 }}>\r\n          <img src={defaultImg} width=\"400px\" height=\"auto\" />\r\n          <div className=\"circular text-center\" style={{ marginTop: 30 }}>\r\n            You are not sharing anything\r\n          </div>\r\n        </div> : null}\r\n        <div className=\"overlay\" style={{ background: (recording || screenshare) ? \"#f5f5f538\" : \"whitesmoke\" }}>\r\n\r\n        </div>\r\n        <div className=\"action-buttons\">\r\n          <div data-tip data-for='shareScreen' onClick={() => screenshare ? stopScreenShare() : startScreenRecording()} className=\"circular start\" id={screenshare ? \"stop\" : \"start\"}>\r\n            <img src={screen} width=\"30px\" height=\"30px\" className=\"v-middle\" />\r\n          </div>\r\n\r\n          <ReactTooltip id='shareScreen' type='dark' place=\"top\" effect='solid'>\r\n            <span className=\"circular\" style={{ fontSize: 15 }}>{screenshare ? \"Stop screen\" : \"Share screen\"}</span>\r\n          </ReactTooltip>\r\n\r\n          <div data-tip data-for='recording' onClick={() => recording ? stopVideoRecording() : startVideoRecording()} className=\"circular start2\" id={recording ? \"stop\" : \"start\"}>\r\n            <img src={video} width=\"30px\" height=\"30px\" className=\"v-middle\" />\r\n          </div>\r\n          <ReactTooltip id='recording' type='dark' place=\"top\" effect='solid'>\r\n            <span className=\"circular\" style={{ fontSize: 15 }}>{recording ? \" Stop video\" : \"Share video\"}</span>\r\n          </ReactTooltip>\r\n\r\n          <div data-tip data-for='audio' onClick={() => muteAudio()} className={`circular start3`} id={!muted ? \"stop\" : \"start\"}>\r\n            <img src={!muted ? mic: mutedmic} width=\"30px\" height=\"30px\" className=\"v-middle\" />\r\n          </div>\r\n\r\n          <ReactTooltip id='audio' type='dark' place=\"top\" effect='solid'>\r\n            <span className=\"circular\" style={{ fontSize: 15 }}>{!muted ? \"Mute micophone\" : \"Unmute micophone\"}</span>\r\n          </ReactTooltip>\r\n\r\n          <div data-tip data-for='storing' onClick={() => storing ? stopRecording(true) : startRecording()} className={`circular start3 ${!recording && !screenshare && !storing ? \"disabled\" : null}`} id={storing ? \"stop\" : \"start\"}>\r\n            <img src={record} width=\"30px\" height=\"30px\" className=\"v-middle\" />\r\n          </div>\r\n\r\n          <ReactTooltip id='storing' type='dark' place=\"top\" effect='solid'>\r\n            <span className=\"circular\" style={{ fontSize: 15 }}>{storing ? \"Stop recording\" : \"Start recording\"}</span>\r\n          </ReactTooltip>\r\n\r\n\r\n        </div>\r\n        <video id=\"screen\" className={`${expanded == \"recorded\" && \"bottom-right\"}`} autoPlay playsInline muted style={{ position: \"absolute\", visibility: \"hidden\", height: 0 }}></video>\r\n        <video id=\"recorded\" className={`${expanded == \"screen\" && \"bottom-right\"}`} playsInline autoPlay muted style={{ position: \"absolute\", visibility: \"hidden\", height: 0 }}></video>\r\n        <div id=\"errorMsg\"></div>\r\n        {screenshare && recording && <div style={{ right: 20, top: 20, zIndex: 22 }} className=\"switch v-middle\" onClick={() => setExpanded(expanded == \"screen\" ? \"recorded\" : \"screen\")}>\r\n          <img src=\"https://image.flaticon.com/icons/svg/125/125868.svg\" width=\"20px\" height=\"20px\" className=\"v-middle\" />\r\n          <span className=\"circular v-middle\" style={{ fontSize: 17 }}>Switch views</span>\r\n        </div>}\r\n\r\n        {storing && <div id=\"animate-flicker\" style={{ left: 20, top: 8, zIndex: 22, position: \"fixed\" }} title=\"Recording\">\r\n          <img src={live} width=\"50px\" height=\"50px\" className=\"v-middle\" />\r\n        </div>}\r\n        <canvas style={{ zIndex:10, position: (!recording && !screenshare) ? \"absolute\" :  !screenshare && recording ? \"absolute\":\"null\", top: !screenshare && recording && (((window.innerHeight - ((window.videoHeight * window.innerWidth)/1280))/2)) }}></canvas>\r\n        {storing && <div className=\"timer circular\" style={{ color: \"#f3f1f1\" }}>\r\n          <div style={{ display: \"inline-block\" }}>{hours <= 9 ? \"0\" + hours : hours}:</div><div style={{ display: \"inline-block\" }}>{minutes <= 9 ? <span>0{minutes}</span> : minutes}:</div>\r\n          <div style={{ display: \"inline-block\" }}>{seconds <= 9 ? \"0\" + seconds : seconds}</div>\r\n        </div>\r\n        }\r\n      </header>\r\n    </div >\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":2,"column":8,"nodeType":"37","messageId":"38","endLine":2,"endColumn":12},{"ruleId":"35","severity":1,"message":"39","line":22,"column":7,"nodeType":"37","messageId":"38","endLine":22,"endColumn":16},{"ruleId":"35","severity":1,"message":"40","line":23,"column":5,"nodeType":"37","messageId":"38","endLine":23,"endColumn":20},{"ruleId":"35","severity":1,"message":"41","line":23,"column":22,"nodeType":"37","messageId":"38","endLine":23,"endColumn":36},{"ruleId":"35","severity":1,"message":"42","line":25,"column":5,"nodeType":"37","messageId":"38","endLine":25,"endColumn":19},{"ruleId":"43","severity":1,"message":"44","line":27,"column":12,"nodeType":"45","messageId":"46","endLine":27,"endColumn":25},{"ruleId":"35","severity":1,"message":"47","line":48,"column":5,"nodeType":"37","messageId":"38","endLine":48,"endColumn":14},{"ruleId":"35","severity":1,"message":"48","line":51,"column":5,"nodeType":"37","messageId":"38","endLine":51,"endColumn":12},{"ruleId":"49","severity":1,"message":"50","line":181,"column":27,"nodeType":"51","messageId":"52","endLine":181,"endColumn":29},{"ruleId":"35","severity":1,"message":"53","line":306,"column":9,"nodeType":"37","messageId":"38","endLine":306,"endColumn":16},{"ruleId":"49","severity":1,"message":"50","line":356,"column":51,"nodeType":"51","messageId":"52","endLine":356,"endColumn":53},{"ruleId":"49","severity":1,"message":"50","line":357,"column":53,"nodeType":"51","messageId":"52","endLine":357,"endColumn":55},{"ruleId":"49","severity":1,"message":"50","line":359,"column":150,"nodeType":"51","messageId":"52","endLine":359,"endColumn":152},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'videoElem' is assigned a value but never used.","'dataFrameHeight' is defined but never used.","'dataFrameWidth' is defined but never used.","'canvasRecorder' is defined but never used.","no-redeclare","'MediaRecorder' is already defined as a built-in global variable.","Block","redeclaredAsBuiltin","'isRunning' is assigned a value but never used.","'restart' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'OPTIONS' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]